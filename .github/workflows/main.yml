
name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the blu_spark-10 branch
  push:
    branches: [ blu_spark-10 ]
  pull_request:
    branches: [ blu_spark-10 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Runs a set of commands using the runners shell
      - name: Apt Update
        run: |
          sudo apt update -y
          sudo apt install -y gcc g++ python make texinfo texlive bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev unzip language-pack-zh-hans

      - name: Download Arm Gcc
        run: |
          cd ${HOME}
          export GCC="gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu"
          wget "https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/${GCC}.tar.xz"
          xz -d ${GCC}.tar.xz
          tar xvf ${GCC}.tar
          rm -rf ${GCC}.tar


      - name: Make
        run: |
          export GCC="gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu"
          export ARCH="arm64"
          export PATH="${HOME}/${GCC}/bin:$PATH"
          export CROSS_COMPILE="aarch64-none-linux-gnu-"
          cd ${GITHUB_WORKSPACE}
          export args="-j16 \
          O=out"
          make ${args} docker_defconfig
          make ${args}
          zip -r kernel.zip out/arch/arm64/boot/Image.gz-dtb


      - name: create github release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release V${{ github.run_number }}

      - name: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: kernel.zip
          asset_name: op5-q-v${{ github.run_number }}.zip
          asset_content_type: application/zip
